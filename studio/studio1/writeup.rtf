{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1. Donggyu Kim(437008)\
\
2. iht32-1506.engr.wustl.edu\
\
3. \
[donggyukim@iht32-1508.sif ~]$ rustc --version\
rustc 1.71.0 (8ede3aae2 2023-07-12)\
[donggyukim@iht32-1508.sif ~]$ cargo --version\
cargo 1.71.0 (cfd3bbd8f 2023-06-08)\
[donggyukim@iht32-1508.sif ~]$ rustdoc --version\
rustdoc 1.71.0 (8ede3aae2 2023-07-12)\
\
4.\
[donggyukim@iht32-1508.sif studio]$ cargo new hello\
     Created binary (application) `hello` package\
[donggyukim@iht32-1508.sif studio]$ cat hello/Cargo.toml\
[package]\
name = "hello"\
version = "0.1.0"\
edition = "2021"\
\
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\
\
[dependencies]\
[donggyukim@iht32-1508.sif studio]$ cat hello/src/main/rs\
cat: hello/src/main/rs: No such file or directory\
[donggyukim@iht32-1508.sif studio]$ cat hello/src/main.rs\
fn main() \{\
    println!("Hello, world!");\
\}\
\
5. [donggyukim@iht32-1508.sif hello]$ cargo run\
   Compiling hello v0.1.0 (/home/warehouse/donggyukim/cse542/studio/hello)\
    Finished dev [unoptimized + debuginfo] target(s) in 4.78s\
     Running `target/debug/hello`\
Hello, world!\
\
6. [donggyukim@iht32-1508.sif hello]$ ./target/debug/hello\
Hello, world!\
\
7. 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Always give any non-trivial formula involving size, indexing, or aliasing arithmetic a comment explaining it. In general, any non-obvious code should have a comment giving an intuition of what it does in general terms (and even better explaining why and/or how it does it that way).\

\f0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
Since this class requires code in a small groups, comments are crucial to make other colleagues understand what\'92s going on with the code, and also should also explicitly state the source of the code if taken from external sources to avoid academic integrity issues. \
\
8. \
[donggyukim@iht32-1507.sif debug]$ ./cmdargs\
usage: ./cmdargs <arg1> [<arg2> ...]\
[donggyukim@iht32-1507.sif debug]$ ./cmdargs a\
arguments passed to ./cmdargs were ['./cmdargs','a',]\
\
9.\
[donggyukim@iht32-1507.sif debug]$ ./cmdargs\
usage: ./cmdargs <arg1> [<arg2> ...]\
[donggyukim@iht32-1507.sif debug]$ echo $?\
1\
[donggyukim@iht32-1507.sif debug]$ ./cmdargs test\
arguments passed to ./cmdargs were ['./cmdargs','test',]\
[donggyukim@iht32-1507.sif debug]$ echo $? \
0\
\
\
10.\
[donggyukim@iht32-1502.sif debug]$ ./cmdargs\
usage: ./cmdargs <arg1> [<arg2> ...]\
Error: 1\
[donggyukim@iht32-1502.sif debug]$ echo $?\
1\
[donggyukim@iht32-1502.sif debug]$ ./cmdargs test\
arguments passed to ./cmdargs were ['./cmdargs','test',]\
[donggyukim@iht32-1502.sif debug]$ echo $?\
0\
\
The reason why changed code prints Error : 1 is that the return type of modified code(Result<(), u8>) returns () when true, u8 when false. Since we set const BAD_ARGS: u8 = 1, the code explicitly returns 1 when error occurs, and nothing when successfully finishes the program, even without using echo.\
reference: https://doc.rust-lang.org/std/result/\
\
11.\
[donggyukim@iht32-1502.sif src]$ cargo run\
   Compiling cmdargs v0.1.0 (/home/warehouse/donggyukim/cse542/studio/cmdargs)\
error: negative integers cannot be used to index on a `Vec<String>`\
  --> src/main.rs:23:22\
   |\
23 |     print!("\{\}", vec[-1]);\
   |                      ^^ cannot use a negative integer for indexing on `Vec<String>`\
\
\
12. \
error[E0382]: borrow of moved value: `vec`\
  --> src/main.rs:24:18\
   |\
6  |    let mut vec = Vec::new();\
   |        ------- move occurs because `vec` has type `Vec<String>`, which does not implement the `Copy` trait\
...\
16 |      for arg in vec\{\
   |                 --- `vec` moved due to this implicit call to `.into_iter()`\
...\
24 |     print!("\{\}", vec[vec.len()]);\
   |                  ^^^ value borrowed here after move\
   |\
note: `into_iter` takes ownership of the receiver `self`, which moves `vec`\
  --> /rustc/8ede3aae28fe6e4d52b38157d7bfe0d3bceef225/library/core/src/iter/traits/collect.rs:271:18\
help: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\
   |\
16 |      for arg in &vec\{\
\
\
\
\
}